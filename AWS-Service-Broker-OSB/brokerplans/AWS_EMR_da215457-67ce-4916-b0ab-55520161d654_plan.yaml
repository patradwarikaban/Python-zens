
AWSTemplateFormatVersion: 2010-09-09
Description: 'AWS Service Broker - Amazon EMR '
Metadata:
  'AWS::ServiceBroker::Specification':
    name: aws-emr
    id: da215457-67ce-4916-b0ab-55520161d654
    description: AWS Service Broker S3 plan
    tags:
      - AWS
      - EMR
      - Clusture
    displayName: Amazon EMR
    imageUrl: Dummy
    longDescription: An Amazon EMR Service
    providerDisplayName: AWS
    documentationUrl: https://aws.amazon.com/emr/
    supportUrl: https://aws.amazon.com/contact-us/
    dashboard_client: https://mydashboard-client
    plans:
      S3_Standard_Plan1:
        id: ab439663-d84a-4cde-a031-1fe2ffff529f
        name: EMR Standard Plan
        description: EMR Standard plan for Demo purpose
        metadata:
          displayname: EMR Test
          bullets:
            - AWS EMR
            - US Standard region
          costs:
            - amount:
                usd: 0.10000
              unit: GB per Month
          imageurl: Dummy
          bindable: true
          planupdateable: true
    bindable: true
    planupdateable: false
    ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: AWS Account Information
      Parameters:
      - KeyName
    - Label:
        default: EMR Settings
      Parameters:
      - EMRApplication
      - ReleaseLabel
    - Label:
        default: Cluster Sizing
      Parameters:
      - MasterInstanceType
      - CoreInstanceType
      - NumberOfCoreInstances
    ParameterLabels:
      KeyName:
        default: Key Name
      EMRApplication:
        default: EMR Application
      ReleaseLabel:
        default: Release Label
      MasterInstanceType:
        default: Master Instance Type
      CoreInstanceType:
        default: Core Instance Type
      NumberOfCoreInstances:
        default: Number Of Core Instances
Parameters:
  EMRClusterName:
    Description: Name of the cluster, if set to "Auto" a name will be auto-generated
    Type: String
    Default: Auto
  KeyName:
    Description: Must be an existing Keyname
    Type: String
  MasterInstanceType:
    Description: Instance type to be used for the master instance.
    Type: String
    Default: m3.xlarge
  CoreInstanceType:
    Description: Instance type to be used for core instances.
    Type: String
    Default: m3.xlarge
  NumberOfCoreInstances:
    Description: Must be a valid number
    Type: Number
    Default: 2
  VpcId:
    Description: Must be a valid VPC ID
    Type: String
  EMRCidr:
    Description: CIDR Block for EMR subnet.
    Type: String
    Default: Auto
  ReleaseLabel:
    Description: Must be a valid EMR release  version
    Default: emr-5.7.0
    Type: String
  EMRApplication:
    Description: Please select which application will be installed on the cluster
      this would be either Ganglia and spark, or Ganglia and s3 backed Hbase
    Type: String
    AllowedValues:
    - Spark
    - Hbase
    Default: Spark
Conditions:
  Spark:
    !Equals
    - !Ref EMRApplication
    - Spark
  Hbase:
    !Equals
    - !Ref EMRApplication
    - Hbase
  AutoEMRClusterName:
    !Equals
    - !Ref EMRClusterName
    - Auto
  AutoEMRCidr:
    !Equals
    - !Ref EMRCidr
    - Auto
Resources:
  GetIgwRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        }
      Policies:
      - PolicyName: GetIgwPolicy
        PolicyDocument: |
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Action": [
                  "ec2:DescribeInternetGateways",
                  "logs:CreateLogGroup",
                  "logs:CreateLogStream",
                  "logs:PutLogEvents"
                ],
                "Resource": "*"
              }
            ]
          }
  GetIgwFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt GetIgwRole.Arn
      Handler: index.handler
      Timeout: 300
      MemorySize: 128
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import traceback
          from os import environ
          def handler(event, context):
            try:
              ec2_client = boto3.client('ec2', region_name=environ['AWS_REGION'])
              response_data = {
                'IgwId': ec2_client.describe_internet_gateways(
                  Filters=[
                    {
                      'Name': "attachment.vpc-id",
                      'Values': [ event['ResourceProperties']['VpcId'] ]
                    },
                    {
                      'Name': "attachment.state",
                      'Values': ['available']}
                  ]
                )['InternetGateways'][0]['InternetGatewayId']
              }
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "GetIgwPhysicalId")
            except Exception:
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, "GetIgwPhysicalId")
              traceback.print_exc()
  GetIgw:
    Type: AWS::CloudFormation::CustomResource
    Version: 1.0,
    Properties:
      ServiceToken: !GetAtt GetIgwFunction.Arn
      VpcId: !Ref VpcId
  EMRRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VpcId
  EMRRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref EMRRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !GetAtt GetIgw.IgwId
  EMRRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EMRRouteTable
      SubnetId: !Ref EMRSubnet
  EMRSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        !If
        - AutoEMRCidr
        - !GetAtt AWSSBInjectedGetEMRCidr.EMRCidr
        - !Ref EMRCidr
      VpcId: !Ref VpcId
  LogBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties: {}
  DataBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties: {}
  EMRCluster:
    DependsOn:
    - EMRClusterServiceRole
    - EMRClusterinstanceProfileRole
    - EMRClusterinstanceProfile
    Type: AWS::EMR::Cluster
    Properties:
      Applications:
      - Name: Ganglia
      - !If
        - Spark
        - Name: Spark
        - !Ref AWS::NoValue
      - !If
        - Hbase
        - Name: Hbase
        - !Ref AWS::NoValue
      Configurations:
      - Classification: hbase-site
        ConfigurationProperties:
          hbase.rootdir: !Sub s3://${DataBucket}/
      - Classification: hbase
        ConfigurationProperties:
          hbase.emr.storageMode: s3
      Instances:
        Ec2KeyName: !Ref KeyName
        Ec2SubnetId: !Ref EMRSubnet
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: !Ref MasterInstanceType
          Market: ON_DEMAND
          Name: Master
        CoreInstanceGroup:
          InstanceCount: !Ref NumberOfCoreInstances
          InstanceType: !Ref CoreInstanceType
          Market: ON_DEMAND
          Name: Core
        TerminationProtected: false
      VisibleToAllUsers: true
      JobFlowRole: !Ref EMRClusterinstanceProfile
      ReleaseLabel: !Ref ReleaseLabel
      LogUri: !Sub s3://${LogBucket}/
      Name:
        !If
        - AutoEMRClusterName
        - !GetAtt AWSSBInjectedGenerateEMRClusterName.EMRClusterName
        - !Ref EMRClusterName
      AutoScalingRole: EMR_AutoScaling_DefaultRole
      ServiceRole: !Ref EMRClusterServiceRole
  EMRClusterServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - elasticmapreduce.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole
      Path: /
  EMRClusterinstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role
      Path: /
  EMRClusterinstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
      - !Ref EMRClusterinstanceProfileRole
  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: awsservicebrokeralpha
      Prefix: functions/
      Objects:
      - generate_emrname/lambda_function.zip
      - get_emrcidrs/lambda_function.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
      - PolicyName: lambda-copier
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetObject
            Resource:
            - arn:aws:s3:::awsservicebrokeralpha/*
          - Effect: Allow
            Action:
            - s3:PutObject
            - s3:DeleteObject
            Resource:
            - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  AWSSBInjectedGenerateEMRClusterNameRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGenerateEMRClusterNameLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGenerateEMRClusterNameRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_emrname/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGenerateEMRClusterName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGenerateEMRClusterNameLambda.Arn
      Length: 16
  AWSSBInjectedGetEMRCidrRole:
    Condition: AutoEMRCidr
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_emrcidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeAvailabilityZones
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGetEMRCidrLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoEMRCidr
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGetEMRCidrRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_emrcidrs/lambda_function.zip
      Runtime: python3.9
      Timeout: '60'
  AWSSBInjectedGetEMRCidr:
    Condition: AutoEMRCidr
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetEMRCidrLambda.Arn
      Qty: 1
      VpcId: !Ref VpcId
      CidrSize: 24
Outputs:
  S3DataBucket:
    Value: !Ref DataBucket
  EmrEndpoint:
    Value: !GetAtt EMRCluster.MasterPublicDNS
  EmrClusterId:
    Value: !Ref EMRCluster
